pipeline: acme_edw_tests
flowgroup: silver_layer_tests  
description: Data quality tests for silver layer dimensional modeling

actions:
  # Test 1: Validate customer dimension surrogate key generation
  - name: test_customer_dim_sk
    type: test
    test_type: uniqueness
    source: "{catalog}.{silver_schema}.customer_dim"
    columns: [customer_key]
    on_violation: fail
    description: "Ensure customer surrogate keys are unique"

  # Test 2: Validate all customers have dimension records
  - name: test_customer_dim_coverage
    type: test
    test_type: all_lookups_found
    source: "{catalog}.{bronze_schema}.customer"
    lookup_table: "{catalog}.{silver_schema}.customer_dim"
    lookup_columns: [customer_key]
    lookup_result_columns: [customer_key]
    on_violation: fail
    description: "All bronze customers must have silver dimension records"

  # Test 3: Validate nation dimension lookup integrity
  - name: test_customer_nation_lookup
    type: test
    test_type: all_lookups_found
    source: "{catalog}.{silver_schema}.customer_dim"
    lookup_table: "{catalog}.{silver_schema}.nation_dim"
    lookup_columns: [nation_key]
    lookup_result_columns: [nation_key]
    on_violation: fail
    description: "All customer nations must exist in nation dimension"

  # Test 4: Validate lineitem fact aggregations
  - name: test_lineitem_fact_totals
    type: test
    test_type: custom_sql
    source: "{catalog}.{silver_schema}.lineitem_fct"
    sql: |
      SELECT 
        COUNT(*) as failed_row_count 
        FROM (
          SELECT
            order_id,
            SUM(quantity) as total_quantity,
            SUM(extended_price) as total_price,
            SUM(discount * extended_price) as total_discount,
            SUM(tax * extended_price) as total_tax
          FROM {catalog}.{silver_schema}.lineitem_fct
          GROUP BY order_id
          HAVING SUM(quantity) <= 0 OR SUM(extended_price) < 0
      )
    expectations:
      - name: failed_row_count
        expression: "failed_row_count == 0"
        on_violation: fail
    description: "Validate fact table aggregations are reasonable"

    # Test 6: Check silver layer completeness
  - name: test_silver_dim_completeness
    type: test
    test_type: completeness
    source: "{catalog}.{silver_schema}.customer_dim"
    required_columns: [customer_key, customer_id, name, address, nation_id, phone]
    on_violation: fail
    description: "Ensure all required dimension attributes are populated"

  
  # Type 2 Dimension Test - Only active records should be unique
  - name: test_customer_dim_active_unique
    type: test
    test_type: uniqueness
    source: "{catalog}.{silver_schema}.customer_dim"
    columns: [customer_id]  # Natural key
    filter: "__END_AT IS NULL"  # Only check active records (Type 2 dimension)
    on_violation: fail
    description: "Only one active record should exist per customer (Type 2 dimension)"

  # Test 8: Cross-check fact to dimension row counts
  - name: test_fact_dimension_balance
    type: test
    test_type: custom_sql
    source: "{catalog}.{silver_schema}.orders_fct"
    sql: |
      WITH fact_customers AS (
        SELECT DISTINCT customer_key FROM {catalog}.{silver_schema}.orders_fct
      ),
      dim_customers AS (
        SELECT DISTINCT customer_key FROM {catalog}.{silver_schema}.customer_dim
      )
      SELECT 
        (SELECT COUNT(*) FROM fact_customers) as fact_count,
        (SELECT COUNT(*) FROM dim_customers) as dim_count
    expectations:
      - name: all_fact_customers_in_dim
        expression: "fact_count <= dim_count"
        on_violation: fail
    description: "All customers in facts must exist in dimensions"
